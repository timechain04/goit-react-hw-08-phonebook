{"version":3,"file":"static/js/705.243082cd.chunk.js","mappings":"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","sources":["pages/LogInPage/LogInPage.jsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport {  useNavigate, useLocation } from 'react-router-dom';\n\nimport { useUserLoginMutation } from 'redux/api/AuthApi';\n\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Button,\n} from '@chakra-ui/react';\nimport { toast } from 'react-toastify';\n\nconst LoginView = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [userLogin, { isSuccess, isError }] = useUserLoginMutation();\n  useEffect(() => {\n    isError && toast.error('Invalid email or password');\n  }, [isSuccess, isError]);\n\n  const handleInputChange = ({ currentTarget: { name, value } }) => {\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    userLogin({ email, password,});\n    setEmail('');\n    setPassword('');\n  };\n\n  let navigate = useNavigate();\n  let location = useLocation();\n\n  const goBack = () => {\n    navigate(location?.state?.from || '/');\n  };\n\n  return (\n<Box\n  marginTop={'30px'}\n  borderRadius={'30px'}\n  marginLeft={'auto'}\n  marginRight={'auto'}\n  w='500px'\n  h='800px'\n  bgGradient=\"linear(to-r, gray.300, purple.300, green.200)\"\n>\n  <Flex>\n    <Stack mx={'auto'} marginTop={'100px'}>\n      <Stack align={'center'}></Stack>\n      <Box\n        as=\"form\"\n        p={20}\n        borderRadius={'20px'}\n        autoComplete=\"off\"\n        onSubmit={handleSubmit}\n      >\n        <Stack spacing={4}>\n          <FormControl id=\"email\">\n            <FormLabel color={'black'}>Email</FormLabel>\n            <Input\n              type=\"email\"\n              pattern=\"^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$\"\n              required\n              onChange={handleInputChange}\n              name=\"email\"\n              value={email}\n              color={'black'}\n            />\n          </FormControl>\n          <FormControl id=\"password\">\n            <FormLabel color={'black'}>Password</FormLabel>\n            <Input\n              type=\"password\"\n              onChange={handleInputChange}\n              value={password}\n              name=\"password\"\n              color={'black'}\n            />\n          </FormControl>\n          <Stack spacing={10}>\n            <Button\n              disabled={email && password ? false : true}\n              type=\"submit\"\n              marginTop={'20px'}\n              bg={'white'}\n              color={'black'}\n              _hover={{\n                bg: '#38a6b4',\n              }}\n            >\n              Log in\n            </Button>\n            <Stack\n              direction={{ base: 'column', sm: 'row' }}\n              align={'start'}\n              justify={'center'}\n            >\n              <Button\n                type=\"button\"\n                onClick={goBack}\n                bg={'white'}\n                color={'black'}\n                _hover={{\n                  color: 'white',\n                  bg: 'black',\n                }}\n              >\n                Back\n              </Button>\n            </Stack>\n          </Stack>\n        </Stack>\n      </Box>\n    </Stack>\n  </Flex>\n</Box>\n\n  );\n};\n\nexport default LoginView;\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n"],"names":["useState","email","setEmail","password","setPassword","useUserLoginMutation","userLogin","isSuccess","isError","useEffect","toast","handleInputChange","currentTarget","name","value","navigate","useNavigate","location","useLocation","marginTop","borderRadius","marginLeft","marginRight","w","h","bgGradient","mx","align","as","p","autoComplete","onSubmit","event","preventDefault","spacing","id","color","I","type","pattern","required","onChange","disabled","bg","_hover","direction","base","sm","justify","onClick","state","from","styles","useStyleConfig","className","children","requiredIndicator","RequiredIndicator","jsxs","optionalIndicator","cx","field","rest","useFormControlContext","passedProps","ownProps","_a","getLabelProps","label","chakra","__css","display","ref","omitThemingProps","FormLabel","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps","forwardRef"],"sourceRoot":""}